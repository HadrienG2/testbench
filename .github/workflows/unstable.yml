# Evil twin of main.yml which checks that testbench remains compatible with
# latest Rust developments every once in a while.
#
# NOTE: It's useless to cache the target folder on this rare workflow since it
#       would usually be invalidated by 1/how rarely the job runs and
#       2/how frequently new nightly and beta versions come out.
#
# FIXME: For now, must be manually kept in sync with main.yml

on:
  schedule:
    - cron: '0 0 1,15 * *'

name: Unstable Rust CI

env:
  RUSTFLAGS: -D warnings

jobs:
  # Formatter output and lints don't depend on the operating system, and only
  # need to be tested on nightly since we don't care about older expectations.
  format:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install toolchain
        id: toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
          components: rustfmt,clippy

      - name: Check format
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - name: Type-check the program
        uses: actions-rs/cargo@v1
        with:
          command: check

      - name: Check clippy lints
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings


  # Run the tests on all supported OSes and Rust versions
  run:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
          - macos-latest
        rust:
          - beta
          - nightly

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install toolchain
        id: toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true

      - name: Run basic tests
        uses: actions-rs/cargo@v1
        with:
          command: test

      - name: Run concurrent tests and benchmarks
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --release -- --ignored --nocapture --test-threads=1
